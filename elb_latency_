#!/usr/bin/env ruby
require 'rubygems'
require 'AWS'

lbname = File.basename(__FILE__).scan(/(?<=elb_latency_).*/).first

dimensions = "LoadBalancerName=#{lbname}"
namespace = 'AWS/ELB'
metricname = 'Latency'

timeperiod = 300

if lbname.empty?
  puts 'Cannot read load balancer name'
  exit 1
end

if ARGV.first == 'config'
  puts "graph_title #{lbname} request latency"
  puts 'graph_vlabel seconds'
  puts "graph_category #{namespace}"
  puts 'average.label average'
  puts 'maximum.label maximum'
  exit 0
end

if ENV['AWS_ACCESS_KEY_ID'].nil?
  puts 'AWS ID not specified. Set env.AWS_ACCESS_KEY_ID'
  exit 1
else
  access_key_id = ENV['AWS_ACCESS_KEY_ID']
end

if ENV['AWS_SECRET_ACCESS_KEY'].nil?
  puts 'AWS Secret not specified. Set env.AWS_SECRET_ACCESS_KEY'
  exit 1
else
  secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
end

begin
  cw = AWS::Cloudwatch::Base.new(:access_key_id => access_key_id, :secret_access_key => secret_access_key)
rescue Exception => e
  puts 'Unknown Exception:', e.inspect
  exit 3
end

res = cw.get_metric_statistics(:namespace => namespace, :measure_name => metricname, :statistics => "Maximum,Average", :dimensions => dimensions, :period => timeperiod, :start_time => (Time.now() - timeperiod) )
avg = res['GetMetricStatisticsResult']['Datapoints']['member'].first['Average']
max = res['GetMetricStatisticsResult']['Datapoints']['member'].first['Maximum']

puts "average.value #{avg}"
puts "maximum.value #{max}"

exit 0
