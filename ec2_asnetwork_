#!/usr/bin/env ruby
require 'rubygems'
require 'AWS'

asname = File.basename(__FILE__).scan(/(?<=ec2_asnetwork_).*/).first

dimensions = "AutoScalingGroupName=#{asname}"
namespace = 'AWS/EC2'

timeperiod = 300

if asname.empty?
  puts 'Cannot read autoscaling group name'
  exit 1
end

if ARGV.first == 'config'
  puts "graph_title #{asname} network traffic"
  puts 'graph_vlabel bits in (-) / out (+) per sec'
  puts "graph_category #{namespace}"
  puts 'in.label in'
  puts 'out.label out'
  puts 'out.negative in'
  puts 'in.graph no'
  exit 0
end

if ENV['AWS_ACCESS_KEY_ID'].nil?
  puts 'AWS ID not specified. Set env.AWS_ACCESS_KEY_ID'
  exit 1
else
  access_key_id = ENV['AWS_ACCESS_KEY_ID']
end

if ENV['AWS_SECRET_ACCESS_KEY'].nil?
  puts 'AWS Secret not specified. Set env.AWS_SECRET_ACCESS_KEY'
  exit 1
else
  secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
end

begin
  cw = AWS::Cloudwatch::Base.new(:access_key_id => access_key_id, :secret_access_key => secret_access_key)
rescue Exception => e
  puts 'Unknown Exception:', e.inspect
  exit 3
end

metricname = 'NetworkIn'
res = cw.get_metric_statistics(:namespace => namespace, :measure_name => metricname, :statistics => "Sum", :dimensions => dimensions, :period => timeperiod, :start_time => (Time.now() - timeperiod) )
bw_in = res['GetMetricStatisticsResult']['Datapoints']['member'].first['Sum']

metricname = 'NetworkOut'
res = cw.get_metric_statistics(:namespace => namespace, :measure_name => metricname, :statistics => "Sum", :dimensions => dimensions, :period => timeperiod, :start_time => (Time.now() - timeperiod) )
bw_out = res['GetMetricStatisticsResult']['Datapoints']['member'].first['Sum']

puts "in.value #{bw_in}"
puts "out.value #{bw_out}"

exit 0
